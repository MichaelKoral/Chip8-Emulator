#ifndef SNAKE_H
#define SNAKE_H
#include <chip8.h>
#define SNAKE_SIZE 1000
// 64x32
// load border
// snake moves foward direction(input changes dir)
// if snake hits apple then add a block to tail (store its pos)continue to move func
// if drawing results in flag then it intersected border or itself -> so fail
// move func: remove last block (it should be stored)
// 
word snakeProgram[SNAKE_SIZE] = {
  //jump to start of code
  0x1214,

  //sprites:
  //top left 8x1, 1x13
  0x8080,
  0x8080,
  0x8080,
  0x8080,
  0x8080,
  0x8080,
  0x8080,
  0xFF80,
  0x00FC,
  //code

  //load border:

  //left side:
  0xA202,
  0x6000,
  0x6100,
  0xD01F,
  0x610F,
  0xD01F,
  0x611E,
  0xD012,

  //right side:
  0xA202,
  0x603F,
  0x6100,
  0xD01F,
  0x610F,
  0xD01F,
  0x611E,
  0xD012,

  //bottom 
  0xA211,
  0x6001,
  0x611F,
  0xD011,
  0x6009,
  0xD011,
  0x6011,
  0xD011,
  0x6019,
  0xD011,
  0x6021,
  0xD011,
  0x6029,
  0xD011,
  0x6031,
  0xD011,
  0xA212,
  0x6039,
  0xD011,

  //top
  0xA211,
  0x6001,
  0x6100,
  0xD011,
  0x6009,
  0xD011,
  0x6011,
  0xD011,
  0x6019,
  0xD011,
  0x6021,
  0xD011,
  0x6029,
  0xD011,
  0x6031,
  0xD011,
  0xA212,
  0x6039,
  0xD011,
  
  //(v0,v1) = (x,y) of head
  //v2 = dir, 0->up, 1->right, 2->down, 3->left
  //v3 = length of snake
  //(v4, v5) = (x,y) of apple
  //v6 = score
  //init game
  0x601F,
  0x610E,
  0x6200,
  0x6302,
  0x6600,
  
  //calulate apple pos
  0xC43F,
  0x4400,
  0x6401,
  0x443F,
  0x643E,
  0xC51F,
  0x4500,
  0x6501,
  0x451F,
  0x641E,
  0xA202,
  0xD451,
  //handle inputs, increment snake, calculate any collisions->handle win/lose logic 
  //main loop
  //up
  0x6705,
  0xE7A1,
  0x6200, 
  //right
  0x6709,
  0xE7A1,
  0x6201, 
  //down
  0x6708,
  0xE7A1,
  0x6202, 
  //left
  0x6707,
  0xE7A1,
  0x6203, 

  0x6801,

  0x4200,
  0x8185,

  0x4201,
  0x8084,
  
  0x4202,
  0x8184,

  0x4203,
  0x8085,

  0xD011,

  0x3F01,
  0x12A2,

};
#endif
